/* eslint-disable 
	@typescript-eslint/no-unused-vars, 
	@typescript-eslint/no-explicit-any */

import 'reflect-metadata';
import {
	IInternalRequestBindOptions,
	IRequestBindOptions,
	RequestBindOptionsKey,
	RequestBindPropertiesKey,
	SpecControllerKey,
	SpecRequestKey,
	SpecResponseMethodKey,
} from '../common';

type KeyDecoratorFn = (target: any, key: string | symbol) => void;
type ClassDecoratorFn = (target: any) => void;

function requestBind(opt: IInternalRequestBindOptions) {
	return function (target: any, key: string | symbol) {
		Reflect.defineMetadata(RequestBindOptionsKey, opt, target, key);
		const propBinds: string[] = Reflect.getMetadata(RequestBindPropertiesKey, target) || [];

		propBinds.push(key.toString());
		Reflect.defineMetadata(RequestBindPropertiesKey, propBinds, target);
	};
}

/**
 * Gets the value from the request body and generate scope for the inner objects
 * @param opt the binder options
 */
export function fromBody(opt: IRequestBindOptions): KeyDecoratorFn {
	return requestBind({ ...opt, fromWhere: 'body' });
}

/**
 * Gets the value from the scope generated by the body binder on the parent object
 * @param opt the binder options
 */
export function fromParentScope(opt: IRequestBindOptions): KeyDecoratorFn {
	return requestBind({ ...opt, fromWhere: 'scope' });
}

/**
 * Gets the value from the params create by the express router (remember to use the { mergeParams : true })
 * @param opt the binder options
 */
export function fromParams(opt: IRequestBindOptions): KeyDecoratorFn {
	return requestBind({ ...opt, fromWhere: 'params' });
}

/**
 * Gets the value from the query create by the express
 * @param opt the binder options
 */
export function fromQuery(opt: IRequestBindOptions): KeyDecoratorFn {
	return requestBind({ isOptional: true, ...opt, fromWhere: 'query' });
}

/**
 * Gets the value from the context (ApiV1Context) inside the respose's locals property
 * @param opt the binder options
 */
export function fromServices(opt?: IRequestBindOptions): KeyDecoratorFn {
	return requestBind({ ...opt, expects: 'service', fromWhere: 'services' });
}

/**
 * Compositions are used to shared some common properties between different request
 * For example, common url params or query params
 * Compositions are handled as objects so it's necessary to be defined or having the typeFactory
 * @param opt the binder options
 */
export function compositionObj(typeFactory?: () => unknown): KeyDecoratorFn {
	return requestBind({ objFactory: typeFactory, expects: 'object', fromWhere: 'composition' });
}

export type specResponseOptions = {
	name?: string;
	schema?: unknown;
	status: number;
	headers?: Record<string, unknown>;
};

export type specControllerOptions = {
	baseRoute?: string;
};

export type specRequestOptions = {
	name?: string;
};

export const specs = {
	genController: (opt: specControllerOptions): ClassDecoratorFn => {
		return function (target: any) {
			Reflect.defineMetadata(SpecControllerKey, opt, target);
		};
	},

	genRequest: (opt: specRequestOptions): ClassDecoratorFn => {
		return function (target: any) {
			Reflect.defineMetadata(SpecRequestKey, opt, target);
		};
	},

	produceResponse: (opt: specResponseOptions): ClassDecoratorFn => {
		return function (target: any) {
			const reponses: specResponseOptions[] = Reflect.getMetadata(SpecResponseMethodKey, target) || [];

			reponses.push(opt);
			Reflect.defineMetadata(SpecResponseMethodKey, reponses, target);
		};
	},

	// eslint-disable-next-line @typescript-eslint/ban-types
	responseOptions: (target: any): specResponseOptions[] => {
		return (Reflect.getMetadata(SpecResponseMethodKey, target) || []) as specResponseOptions[];
	},

	stringOptional: 'optional',
	stringRequired: 'required',
	numberOptional: 0,
	numberRequired: 1,
	booleanOptional: false,
	booleanRequired: true,
};
