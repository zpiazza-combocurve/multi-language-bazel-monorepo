import mongoose, { Connection } from 'mongoose';
declare const registerModels: (db: Connection) => {
    ArchivedProjectModel: mongoose.Model<unknown, {}, {}>;
    AssumptionModel: mongoose.Model<unknown, {}, {}>;
    CustomHeaderConfigurationModel: mongoose.Model<unknown, {}, {}>;
    DailyProductionModel: mongoose.Model<unknown, {}, {}>;
    DailyStreamDataModel: mongoose.Model<unknown, {}, {}>;
    DataImportMappingModel: mongoose.Model<unknown, {}, {}>;
    DeterministicForecastDataModel: mongoose.Model<unknown, {}, {}>;
    EconComboSettingModel: mongoose.Model<unknown, {}, {}>;
    EconRunModel: mongoose.Model<unknown, {}, {}>;
    EconRunsDataModel: mongoose.Model<unknown, {}, {}>;
    EconSettingModel: mongoose.Model<unknown, {}, {}>;
    EconReportSettingModel: mongoose.Model<unknown, {}, {}>;
    EconVisualizationSetupModel: mongoose.Model<unknown, {}, {}>;
    FileImportModel: mongoose.Model<unknown, {}, {}>;
    FileModel: mongoose.Model<unknown, {}, {}>;
    FilterSettingModel: mongoose.Model<unknown, {}, {}>;
    FilterModel: mongoose.Model<unknown, {}, {}>;
    ForecastBucketModel: mongoose.Model<unknown, {}, {}>;
    ForecastConfigurationModel: mongoose.Model<unknown, {}, {}>;
    ForecastDataModel: mongoose.Model<unknown, {}, {}>;
    ForecastExportModel: mongoose.Model<unknown, {}, {}>;
    ForecastLookupTableModel: mongoose.Model<unknown, {}, {}>;
    ForecastModel: mongoose.Model<unknown, {}, {}>;
    ForecastRollUpRunModel: mongoose.Model<unknown, {}, {}>;
    ForecastWellAssignmentModel: mongoose.Model<unknown, {}, {}>;
    HeatmapSettingModel: mongoose.Model<unknown, {}, {}>;
    LookupTableModel: mongoose.Model<unknown, {}, {}>;
    MapHeaderModel: mongoose.Model<unknown, {}, {}>;
    MonthlyProductionModel: mongoose.Model<unknown, {}, {}>;
    MonthlyStreamDataModel: mongoose.Model<unknown, {}, {}>;
    NotificationModel: mongoose.Model<unknown, {}, {}>;
    OwnershipQualifierModel: mongoose.Model<unknown, {}, {}>;
    PasswordlessTokenModel: mongoose.Model<unknown, {}, {}>;
    ProjectCustomHeadersDataModel: mongoose.Model<unknown, {}, {}>;
    ProjectCustomHeaderModel: mongoose.Model<unknown, {}, {}>;
    ProjectModel: mongoose.Model<unknown, {}, {}>;
    RollUpGroupsModel: mongoose.Model<unknown, {}, {}>;
    ScenarioModel: mongoose.Model<unknown, {}, {}>;
    ScenarioWellAssignmentModel: mongoose.Model<unknown, {}, {}>;
    ScenRollUpRunModel: mongoose.Model<unknown, {}, {}>;
    ScheduleConstructionModel: mongoose.Model<unknown, {}, {}>;
    ScheduleModel: mongoose.Model<unknown, {}, {}>;
    ScheduleSettingModel: mongoose.Model<unknown, {}, {}>;
    ScheduleUmbrellaDataModel: mongoose.Model<unknown, {}, {}>;
    ScheduleUmbrellaModel: mongoose.Model<unknown, {}, {}>;
    ScheduleWellAssignmentModel: mongoose.Model<unknown, {}, {}>;
    ScheduleWellOutputModel: mongoose.Model<unknown, {}, {}>;
    SessionModel: mongoose.Model<unknown, {}, {}>;
    ShapefileModel: mongoose.Model<unknown, {}, {}>;
    SortingModel: mongoose.Model<unknown, {}, {}>;
    DefaultUserSortingModel: mongoose.Model<unknown, {}, {}>;
    StreamModel: mongoose.Model<unknown, {}, {}>;
    StreamWellAssignmentModel: mongoose.Model<unknown, {}, {}>;
    TaskModel: mongoose.Model<unknown, {}, {}>;
    TypeCurveFitModel: mongoose.Model<unknown, {}, {}>;
    TypeCurveModel: mongoose.Model<unknown, {}, {}>;
    TypeCurveNormalizationModel: mongoose.Model<unknown, {}, {}>;
    TypeCurveNormalizationWellModel: mongoose.Model<unknown, {}, {}>;
    TypeCurveUmbrellaModel: mongoose.Model<unknown, {}, {}>;
    TypeCurveWellAssignmentModel: mongoose.Model<unknown, {}, {}>;
    UserModel: mongoose.Model<unknown, {}, {}>;
    AccessPolicyModel: mongoose.Model<unknown, {}, {}>;
    WellModel: mongoose.Model<unknown, {}, {}>;
    CompanyForecastSettingModel: mongoose.Model<unknown, {}, {}>;
    WellCommentBucketModel: mongoose.Model<unknown, {}, {}>;
    TagModel: mongoose.Model<unknown, {}, {}>;
};
declare const registerSharedModels: (sharedDb: Connection) => {
    QueueModel: mongoose.Model<unknown, {}, {}>;
    ShareableCodeImportModel: mongoose.Model<unknown, {}, {}>;
    ShareableCodeModel: mongoose.Model<unknown, {}, {}>;
    FeatureFlagsModel: mongoose.Model<unknown, {}, {}>;
};
export { registerModels, registerSharedModels };
//# sourceMappingURL=models.d.ts.map