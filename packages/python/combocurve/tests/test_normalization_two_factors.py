import math
import pytest
import numpy as np
from combocurve.science.type_curve.normalization_two_factors import NormalizationTwoFactors

normalization_pipeline_params = [[
    np.array([
        171, 281, 239, 229, 304, 278, 266, 256, 260, 249, 258, 248, 251, 273, 223, 202, 245, 216, 269, 309, 249, 166,
        171, 160, 146, 141, 95, 101, 85, 80, 55, 29, 55, 96, 103, 105, 83, 61, 53, 54, 71, 85, 87, 82, 83, 78, 75, 70,
        75, 36, 38, 77, 61, 45, 48, 37, 36, 36, 28, 31, 37, 29, 34, 19, 29, 21, 32, 28, 21, 31, 24, 27, 23, 28, 11, 20,
        22, 18, 21, 25, 26, 24, 25, 23, 25, 23, 22, 23, 20, 20, 20, 7, 14, 23, 21, 20, 18, 16, 17, 18, 19, 17, 17, 18,
        19, 16, 13, 16, 17, 17, 18, 17, 17, 15, 16, 13, 19, 12, 13, 16, 15, 16, 14, 13, 17, 15, 16, 15, 14, 16, 16, 19,
        15, 15, 8, 20, 7, 10, 4, 12, 22, 17, 9, 24, 16, 14, 12, 0, 0, 0, 0, 5, 28, 22, 17, 19, 25, 20, 13, 0, 7, 9, 23,
        23, 20, 17, 16, 18, 14, 11, 10, 11, 10, 21, 20, 9, 12, 11, 13, 14, 11, 4, 0, 20, 11, 12, 12, 14, 9, 13, 10, 12,
        13, 10, 8, 13, 16, 6, 7, 13, 20, 13, 12, 10, 12, 11, 9, 8, 7, 6, 8, 9, 9, 11, 11, 16, 15, 11, 12, 14, 13, 9, 11,
        10, 10, 9, 10, 10, 8, 13, 11, 14, 10, 8, 10, 8, 8, 11, 13, 10, 12, 10, 8, 10, 11, 9, 11, 10, 10, 12, 6, 8, 10,
        11, 13, 8, 12, 9, 11, 10, 11, 10, 10, 12, 14, 18, 15, 10, 18, 15, 16, 14, 15, 12, 14, 6, 15, 16, 15, 12, 12, 12,
        12, 12, 11, 10, 10, 10, 9, 5, 12, 10, 10, 8, 10, 8, 9, 9, 9, 10, 8, 10, 8, 9, 8, 7, 9, 11, 10, 7, 8, 8, 8, 6,
        10, 6, 8, 7, 8, 9, 8, 7, 5, 6, 9, 8, 8, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
        4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
        3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ])
]]


@pytest.mark.unittest
@pytest.mark.parametrize("params", normalization_pipeline_params)
def test_normalization_pipeline(params):
    p1 = NormalizationTwoFactors([463.5], [24874], [309], [12437])
    p1_factors = p1.normalization_pipeline(params)

    assert len(p1_factors) == 3
    assert math.isclose(p1_factors['nominalEur'][0], 0.8285935000759079)
    assert math.isclose(p1_factors['nominalQPeak'][0], 4.007618077717465)
