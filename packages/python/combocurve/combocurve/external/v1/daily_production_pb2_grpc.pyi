"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import combocurve.external.v1.daily_production_pb2
import grpc

class ExternalDailyProductionServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    Count: grpc.UnaryUnaryMultiCallable[
        combocurve.external.v1.daily_production_pb2.ExternalDailyProductionServiceCountRequest,
        combocurve.external.v1.daily_production_pb2.ExternalDailyProductionServiceCountResponse,
    ]
    """Count daily production data for multiple wells."""
    Fetch: grpc.UnaryStreamMultiCallable[
        combocurve.external.v1.daily_production_pb2.ExternalDailyProductionServiceFetchRequest,
        combocurve.external.v1.daily_production_pb2.ExternalDailyProductionServiceFetchResponse,
    ]
    """Fetch daily production data for multiple wells."""
    Upsert: grpc.StreamUnaryMultiCallable[
        combocurve.external.v1.daily_production_pb2.ExternalDailyProductionServiceUpsertRequest,
        combocurve.external.v1.daily_production_pb2.ExternalDailyProductionServiceUpsertResponse,
    ]
    """Upsert daily production data for multiple wells."""
    DeleteByWell: grpc.UnaryUnaryMultiCallable[
        combocurve.external.v1.daily_production_pb2.ExternalDailyProductionServiceDeleteByWellRequest,
        combocurve.external.v1.daily_production_pb2.ExternalDailyProductionServiceDeleteByWellResponse,
    ]
    """Delete production data for the given well. An optional date range can be
    provided to restrict the production data points to be deleted.
    """

class ExternalDailyProductionServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Count(
        self,
        request: combocurve.external.v1.daily_production_pb2.ExternalDailyProductionServiceCountRequest,
        context: grpc.ServicerContext,
    ) -> combocurve.external.v1.daily_production_pb2.ExternalDailyProductionServiceCountResponse:
        """Count daily production data for multiple wells."""
    @abc.abstractmethod
    def Fetch(
        self,
        request: combocurve.external.v1.daily_production_pb2.ExternalDailyProductionServiceFetchRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[combocurve.external.v1.daily_production_pb2.ExternalDailyProductionServiceFetchResponse]:
        """Fetch daily production data for multiple wells."""
    @abc.abstractmethod
    def Upsert(
        self,
        request_iterator: collections.abc.Iterator[combocurve.external.v1.daily_production_pb2.ExternalDailyProductionServiceUpsertRequest],
        context: grpc.ServicerContext,
    ) -> combocurve.external.v1.daily_production_pb2.ExternalDailyProductionServiceUpsertResponse:
        """Upsert daily production data for multiple wells."""
    @abc.abstractmethod
    def DeleteByWell(
        self,
        request: combocurve.external.v1.daily_production_pb2.ExternalDailyProductionServiceDeleteByWellRequest,
        context: grpc.ServicerContext,
    ) -> combocurve.external.v1.daily_production_pb2.ExternalDailyProductionServiceDeleteByWellResponse:
        """Delete production data for the given well. An optional date range can be
        provided to restrict the production data points to be deleted.
        """

def add_ExternalDailyProductionServiceServicer_to_server(servicer: ExternalDailyProductionServiceServicer, server: grpc.Server) -> None: ...
