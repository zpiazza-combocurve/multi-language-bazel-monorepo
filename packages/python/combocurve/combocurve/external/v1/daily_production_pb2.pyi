"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import combocurve.common.v1.date_range_pb2
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import sys
import typing

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class ExternalDailyProductionServiceCountRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    WELLS_FIELD_NUMBER: builtins.int
    PROJECT_FIELD_NUMBER: builtins.int
    DATE_RANGE_FIELD_NUMBER: builtins.int
    CREATED_AT_RANGE_FIELD_NUMBER: builtins.int
    UPDATED_AT_RANGE_FIELD_NUMBER: builtins.int
    ONLY_PHYSICAL_WELLS_FIELD_NUMBER: builtins.int
    @property
    def wells(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """API layers are responsible for enforcing that the size of `wells` is
        reasonable for a single request.
        """
    project: builtins.str
    """When null or missing, only company-level wells will be returned."""
    @property
    def date_range(self) -> combocurve.common.v1.date_range_pb2.DateRange: ...
    @property
    def created_at_range(self) -> combocurve.common.v1.date_range_pb2.DateRange: ...
    @property
    def updated_at_range(self) -> combocurve.common.v1.date_range_pb2.DateRange: ...
    only_physical_wells: builtins.bool
    def __init__(
        self,
        *,
        wells: collections.abc.Iterable[builtins.str] | None = ...,
        project: builtins.str | None = ...,
        date_range: combocurve.common.v1.date_range_pb2.DateRange | None = ...,
        created_at_range: combocurve.common.v1.date_range_pb2.DateRange | None = ...,
        updated_at_range: combocurve.common.v1.date_range_pb2.DateRange | None = ...,
        only_physical_wells: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_only_physical_wells", b"_only_physical_wells", "_project", b"_project", "created_at_range", b"created_at_range", "date_range", b"date_range", "only_physical_wells", b"only_physical_wells", "project", b"project", "updated_at_range", b"updated_at_range"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_only_physical_wells", b"_only_physical_wells", "_project", b"_project", "created_at_range", b"created_at_range", "date_range", b"date_range", "only_physical_wells", b"only_physical_wells", "project", b"project", "updated_at_range", b"updated_at_range", "wells", b"wells"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_only_physical_wells", b"_only_physical_wells"]) -> typing_extensions.Literal["only_physical_wells"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_project", b"_project"]) -> typing_extensions.Literal["project"] | None: ...

global___ExternalDailyProductionServiceCountRequest = ExternalDailyProductionServiceCountRequest

@typing_extensions.final
class ExternalDailyProductionServiceCountResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    COUNT_FIELD_NUMBER: builtins.int
    count: builtins.int
    def __init__(
        self,
        *,
        count: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["count", b"count"]) -> None: ...

global___ExternalDailyProductionServiceCountResponse = ExternalDailyProductionServiceCountResponse

@typing_extensions.final
class ExternalDailyProductionServiceFetchRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FIELD_MASK_FIELD_NUMBER: builtins.int
    WELLS_FIELD_NUMBER: builtins.int
    PROJECT_FIELD_NUMBER: builtins.int
    DATE_RANGE_FIELD_NUMBER: builtins.int
    CREATED_AT_RANGE_FIELD_NUMBER: builtins.int
    UPDATED_AT_RANGE_FIELD_NUMBER: builtins.int
    SORT_FIELD_NUMBER: builtins.int
    SKIP_FIELD_NUMBER: builtins.int
    TAKE_FIELD_NUMBER: builtins.int
    ONLY_PHYSICAL_WELLS_FIELD_NUMBER: builtins.int
    @property
    def field_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """A list of fields to consider during this request. The default is all
        fields. API layers are responsible for implementing this behavior.
        """
    @property
    def wells(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """API layers are responsible for enforcing that the size of `wells` is
        reasonable for a single request.
        """
    project: builtins.str
    """When null or missing, only company-level wells will be returned."""
    @property
    def date_range(self) -> combocurve.common.v1.date_range_pb2.DateRange: ...
    @property
    def created_at_range(self) -> combocurve.common.v1.date_range_pb2.DateRange: ...
    @property
    def updated_at_range(self) -> combocurve.common.v1.date_range_pb2.DateRange: ...
    sort: builtins.str
    """Sort by the given field. Allowed fields are `well`, `date`, `createdAt`,
    and `updatedAt`. An optional `+` or `-` prefix can be used to sort in
    ascending or descending order, respectively. The default is ascending
    order.
    """
    skip: builtins.int
    take: builtins.int
    only_physical_wells: builtins.bool
    def __init__(
        self,
        *,
        field_mask: google.protobuf.field_mask_pb2.FieldMask | None = ...,
        wells: collections.abc.Iterable[builtins.str] | None = ...,
        project: builtins.str | None = ...,
        date_range: combocurve.common.v1.date_range_pb2.DateRange | None = ...,
        created_at_range: combocurve.common.v1.date_range_pb2.DateRange | None = ...,
        updated_at_range: combocurve.common.v1.date_range_pb2.DateRange | None = ...,
        sort: builtins.str | None = ...,
        skip: builtins.int | None = ...,
        take: builtins.int | None = ...,
        only_physical_wells: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_only_physical_wells", b"_only_physical_wells", "_project", b"_project", "_skip", b"_skip", "_sort", b"_sort", "_take", b"_take", "created_at_range", b"created_at_range", "date_range", b"date_range", "field_mask", b"field_mask", "only_physical_wells", b"only_physical_wells", "project", b"project", "skip", b"skip", "sort", b"sort", "take", b"take", "updated_at_range", b"updated_at_range"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_only_physical_wells", b"_only_physical_wells", "_project", b"_project", "_skip", b"_skip", "_sort", b"_sort", "_take", b"_take", "created_at_range", b"created_at_range", "date_range", b"date_range", "field_mask", b"field_mask", "only_physical_wells", b"only_physical_wells", "project", b"project", "skip", b"skip", "sort", b"sort", "take", b"take", "updated_at_range", b"updated_at_range", "wells", b"wells"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_only_physical_wells", b"_only_physical_wells"]) -> typing_extensions.Literal["only_physical_wells"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_project", b"_project"]) -> typing_extensions.Literal["project"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_skip", b"_skip"]) -> typing_extensions.Literal["skip"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_sort", b"_sort"]) -> typing_extensions.Literal["sort"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_take", b"_take"]) -> typing_extensions.Literal["take"] | None: ...

global___ExternalDailyProductionServiceFetchRequest = ExternalDailyProductionServiceFetchRequest

@typing_extensions.final
class ExternalDailyProductionServiceFetchResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATE_FIELD_NUMBER: builtins.int
    WELL_FIELD_NUMBER: builtins.int
    PROJECT_FIELD_NUMBER: builtins.int
    BOTTOM_HOLE_PRESSURE_FIELD_NUMBER: builtins.int
    CASING_HEAD_PRESSURE_FIELD_NUMBER: builtins.int
    CHOKE_FIELD_NUMBER: builtins.int
    CO2_INJECTION_FIELD_NUMBER: builtins.int
    FLOWLINE_PRESSURE_FIELD_NUMBER: builtins.int
    GAS_FIELD_NUMBER: builtins.int
    GAS_INJECTION_FIELD_NUMBER: builtins.int
    GAS_LIFT_INJECTION_PRESSURE_FIELD_NUMBER: builtins.int
    HOURS_ON_FIELD_NUMBER: builtins.int
    NGL_FIELD_NUMBER: builtins.int
    OIL_FIELD_NUMBER: builtins.int
    STEAM_INJECTION_FIELD_NUMBER: builtins.int
    TUBING_HEAD_PRESSURE_FIELD_NUMBER: builtins.int
    VESSEL_SEPARATOR_PRESSURE_FIELD_NUMBER: builtins.int
    WATER_FIELD_NUMBER: builtins.int
    WATER_INJECTION_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_0_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_1_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_2_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_3_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_4_FIELD_NUMBER: builtins.int
    OPERATIONAL_TAG_FIELD_NUMBER: builtins.int
    CREATED_AT_FIELD_NUMBER: builtins.int
    UPDATED_AT_FIELD_NUMBER: builtins.int
    @property
    def date(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    well: builtins.str
    project: builtins.str
    bottom_hole_pressure: builtins.float
    casing_head_pressure: builtins.float
    choke: builtins.float
    co2_injection: builtins.float
    flowline_pressure: builtins.float
    gas: builtins.float
    gas_injection: builtins.float
    gas_lift_injection_pressure: builtins.float
    hours_on: builtins.float
    ngl: builtins.float
    oil: builtins.float
    steam_injection: builtins.float
    tubing_head_pressure: builtins.float
    vessel_separator_pressure: builtins.float
    water: builtins.float
    water_injection: builtins.float
    custom_number_0: builtins.float
    custom_number_1: builtins.float
    custom_number_2: builtins.float
    custom_number_3: builtins.float
    custom_number_4: builtins.float
    operational_tag: builtins.str
    @property
    def created_at(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    @property
    def updated_at(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    def __init__(
        self,
        *,
        date: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        well: builtins.str = ...,
        project: builtins.str | None = ...,
        bottom_hole_pressure: builtins.float | None = ...,
        casing_head_pressure: builtins.float | None = ...,
        choke: builtins.float | None = ...,
        co2_injection: builtins.float | None = ...,
        flowline_pressure: builtins.float | None = ...,
        gas: builtins.float | None = ...,
        gas_injection: builtins.float | None = ...,
        gas_lift_injection_pressure: builtins.float | None = ...,
        hours_on: builtins.float | None = ...,
        ngl: builtins.float | None = ...,
        oil: builtins.float | None = ...,
        steam_injection: builtins.float | None = ...,
        tubing_head_pressure: builtins.float | None = ...,
        vessel_separator_pressure: builtins.float | None = ...,
        water: builtins.float | None = ...,
        water_injection: builtins.float | None = ...,
        custom_number_0: builtins.float | None = ...,
        custom_number_1: builtins.float | None = ...,
        custom_number_2: builtins.float | None = ...,
        custom_number_3: builtins.float | None = ...,
        custom_number_4: builtins.float | None = ...,
        operational_tag: builtins.str | None = ...,
        created_at: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        updated_at: google.protobuf.timestamp_pb2.Timestamp | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_bottom_hole_pressure", b"_bottom_hole_pressure", "_casing_head_pressure", b"_casing_head_pressure", "_choke", b"_choke", "_co2_injection", b"_co2_injection", "_created_at", b"_created_at", "_custom_number_0", b"_custom_number_0", "_custom_number_1", b"_custom_number_1", "_custom_number_2", b"_custom_number_2", "_custom_number_3", b"_custom_number_3", "_custom_number_4", b"_custom_number_4", "_flowline_pressure", b"_flowline_pressure", "_gas", b"_gas", "_gas_injection", b"_gas_injection", "_gas_lift_injection_pressure", b"_gas_lift_injection_pressure", "_hours_on", b"_hours_on", "_ngl", b"_ngl", "_oil", b"_oil", "_operational_tag", b"_operational_tag", "_project", b"_project", "_steam_injection", b"_steam_injection", "_tubing_head_pressure", b"_tubing_head_pressure", "_updated_at", b"_updated_at", "_vessel_separator_pressure", b"_vessel_separator_pressure", "_water", b"_water", "_water_injection", b"_water_injection", "bottom_hole_pressure", b"bottom_hole_pressure", "casing_head_pressure", b"casing_head_pressure", "choke", b"choke", "co2_injection", b"co2_injection", "created_at", b"created_at", "custom_number_0", b"custom_number_0", "custom_number_1", b"custom_number_1", "custom_number_2", b"custom_number_2", "custom_number_3", b"custom_number_3", "custom_number_4", b"custom_number_4", "date", b"date", "flowline_pressure", b"flowline_pressure", "gas", b"gas", "gas_injection", b"gas_injection", "gas_lift_injection_pressure", b"gas_lift_injection_pressure", "hours_on", b"hours_on", "ngl", b"ngl", "oil", b"oil", "operational_tag", b"operational_tag", "project", b"project", "steam_injection", b"steam_injection", "tubing_head_pressure", b"tubing_head_pressure", "updated_at", b"updated_at", "vessel_separator_pressure", b"vessel_separator_pressure", "water", b"water", "water_injection", b"water_injection"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_bottom_hole_pressure", b"_bottom_hole_pressure", "_casing_head_pressure", b"_casing_head_pressure", "_choke", b"_choke", "_co2_injection", b"_co2_injection", "_created_at", b"_created_at", "_custom_number_0", b"_custom_number_0", "_custom_number_1", b"_custom_number_1", "_custom_number_2", b"_custom_number_2", "_custom_number_3", b"_custom_number_3", "_custom_number_4", b"_custom_number_4", "_flowline_pressure", b"_flowline_pressure", "_gas", b"_gas", "_gas_injection", b"_gas_injection", "_gas_lift_injection_pressure", b"_gas_lift_injection_pressure", "_hours_on", b"_hours_on", "_ngl", b"_ngl", "_oil", b"_oil", "_operational_tag", b"_operational_tag", "_project", b"_project", "_steam_injection", b"_steam_injection", "_tubing_head_pressure", b"_tubing_head_pressure", "_updated_at", b"_updated_at", "_vessel_separator_pressure", b"_vessel_separator_pressure", "_water", b"_water", "_water_injection", b"_water_injection", "bottom_hole_pressure", b"bottom_hole_pressure", "casing_head_pressure", b"casing_head_pressure", "choke", b"choke", "co2_injection", b"co2_injection", "created_at", b"created_at", "custom_number_0", b"custom_number_0", "custom_number_1", b"custom_number_1", "custom_number_2", b"custom_number_2", "custom_number_3", b"custom_number_3", "custom_number_4", b"custom_number_4", "date", b"date", "flowline_pressure", b"flowline_pressure", "gas", b"gas", "gas_injection", b"gas_injection", "gas_lift_injection_pressure", b"gas_lift_injection_pressure", "hours_on", b"hours_on", "ngl", b"ngl", "oil", b"oil", "operational_tag", b"operational_tag", "project", b"project", "steam_injection", b"steam_injection", "tubing_head_pressure", b"tubing_head_pressure", "updated_at", b"updated_at", "vessel_separator_pressure", b"vessel_separator_pressure", "water", b"water", "water_injection", b"water_injection", "well", b"well"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_bottom_hole_pressure", b"_bottom_hole_pressure"]) -> typing_extensions.Literal["bottom_hole_pressure"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_casing_head_pressure", b"_casing_head_pressure"]) -> typing_extensions.Literal["casing_head_pressure"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_choke", b"_choke"]) -> typing_extensions.Literal["choke"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_co2_injection", b"_co2_injection"]) -> typing_extensions.Literal["co2_injection"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_created_at", b"_created_at"]) -> typing_extensions.Literal["created_at"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_0", b"_custom_number_0"]) -> typing_extensions.Literal["custom_number_0"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_1", b"_custom_number_1"]) -> typing_extensions.Literal["custom_number_1"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_2", b"_custom_number_2"]) -> typing_extensions.Literal["custom_number_2"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_3", b"_custom_number_3"]) -> typing_extensions.Literal["custom_number_3"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_4", b"_custom_number_4"]) -> typing_extensions.Literal["custom_number_4"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_flowline_pressure", b"_flowline_pressure"]) -> typing_extensions.Literal["flowline_pressure"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_gas", b"_gas"]) -> typing_extensions.Literal["gas"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_gas_injection", b"_gas_injection"]) -> typing_extensions.Literal["gas_injection"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_gas_lift_injection_pressure", b"_gas_lift_injection_pressure"]) -> typing_extensions.Literal["gas_lift_injection_pressure"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_hours_on", b"_hours_on"]) -> typing_extensions.Literal["hours_on"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_ngl", b"_ngl"]) -> typing_extensions.Literal["ngl"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_oil", b"_oil"]) -> typing_extensions.Literal["oil"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_operational_tag", b"_operational_tag"]) -> typing_extensions.Literal["operational_tag"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_project", b"_project"]) -> typing_extensions.Literal["project"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_steam_injection", b"_steam_injection"]) -> typing_extensions.Literal["steam_injection"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_tubing_head_pressure", b"_tubing_head_pressure"]) -> typing_extensions.Literal["tubing_head_pressure"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_updated_at", b"_updated_at"]) -> typing_extensions.Literal["updated_at"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_vessel_separator_pressure", b"_vessel_separator_pressure"]) -> typing_extensions.Literal["vessel_separator_pressure"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_water", b"_water"]) -> typing_extensions.Literal["water"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_water_injection", b"_water_injection"]) -> typing_extensions.Literal["water_injection"] | None: ...

global___ExternalDailyProductionServiceFetchResponse = ExternalDailyProductionServiceFetchResponse

@typing_extensions.final
class ExternalDailyProductionServiceUpsertRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FIELD_MASK_FIELD_NUMBER: builtins.int
    WELL_FIELD_NUMBER: builtins.int
    DATE_FIELD_NUMBER: builtins.int
    PROJECT_FIELD_NUMBER: builtins.int
    BOTTOM_HOLE_PRESSURE_FIELD_NUMBER: builtins.int
    CASING_HEAD_PRESSURE_FIELD_NUMBER: builtins.int
    CHOKE_FIELD_NUMBER: builtins.int
    CO2_INJECTION_FIELD_NUMBER: builtins.int
    FLOWLINE_PRESSURE_FIELD_NUMBER: builtins.int
    GAS_FIELD_NUMBER: builtins.int
    GAS_INJECTION_FIELD_NUMBER: builtins.int
    GAS_LIFT_INJECTION_PRESSURE_FIELD_NUMBER: builtins.int
    HOURS_ON_FIELD_NUMBER: builtins.int
    NGL_FIELD_NUMBER: builtins.int
    OIL_FIELD_NUMBER: builtins.int
    STEAM_INJECTION_FIELD_NUMBER: builtins.int
    TUBING_HEAD_PRESSURE_FIELD_NUMBER: builtins.int
    VESSEL_SEPARATOR_PRESSURE_FIELD_NUMBER: builtins.int
    WATER_FIELD_NUMBER: builtins.int
    WATER_INJECTION_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_0_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_1_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_2_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_3_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_4_FIELD_NUMBER: builtins.int
    OPERATIONAL_TAG_FIELD_NUMBER: builtins.int
    @property
    def field_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """A list of fields to consider during this request. The default is all
        fields. API layers are responsible for implementing this behavior.
        """
    well: builtins.str
    """Required. The combination of `well` + `date` identifies a production
    record.
    """
    @property
    def date(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Required. The combination of `well` + `date` identifies a production
        record.
        """
    project: builtins.str
    """Project ID for the well this record corresponds to, or empty for
    company-level wells.
    """
    bottom_hole_pressure: builtins.float
    casing_head_pressure: builtins.float
    choke: builtins.float
    co2_injection: builtins.float
    flowline_pressure: builtins.float
    gas: builtins.float
    gas_injection: builtins.float
    gas_lift_injection_pressure: builtins.float
    hours_on: builtins.float
    ngl: builtins.float
    oil: builtins.float
    steam_injection: builtins.float
    tubing_head_pressure: builtins.float
    vessel_separator_pressure: builtins.float
    water: builtins.float
    water_injection: builtins.float
    custom_number_0: builtins.float
    custom_number_1: builtins.float
    custom_number_2: builtins.float
    custom_number_3: builtins.float
    custom_number_4: builtins.float
    operational_tag: builtins.str
    def __init__(
        self,
        *,
        field_mask: google.protobuf.field_mask_pb2.FieldMask | None = ...,
        well: builtins.str = ...,
        date: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        project: builtins.str | None = ...,
        bottom_hole_pressure: builtins.float | None = ...,
        casing_head_pressure: builtins.float | None = ...,
        choke: builtins.float | None = ...,
        co2_injection: builtins.float | None = ...,
        flowline_pressure: builtins.float | None = ...,
        gas: builtins.float | None = ...,
        gas_injection: builtins.float | None = ...,
        gas_lift_injection_pressure: builtins.float | None = ...,
        hours_on: builtins.float | None = ...,
        ngl: builtins.float | None = ...,
        oil: builtins.float | None = ...,
        steam_injection: builtins.float | None = ...,
        tubing_head_pressure: builtins.float | None = ...,
        vessel_separator_pressure: builtins.float | None = ...,
        water: builtins.float | None = ...,
        water_injection: builtins.float | None = ...,
        custom_number_0: builtins.float | None = ...,
        custom_number_1: builtins.float | None = ...,
        custom_number_2: builtins.float | None = ...,
        custom_number_3: builtins.float | None = ...,
        custom_number_4: builtins.float | None = ...,
        operational_tag: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_bottom_hole_pressure", b"_bottom_hole_pressure", "_casing_head_pressure", b"_casing_head_pressure", "_choke", b"_choke", "_co2_injection", b"_co2_injection", "_custom_number_0", b"_custom_number_0", "_custom_number_1", b"_custom_number_1", "_custom_number_2", b"_custom_number_2", "_custom_number_3", b"_custom_number_3", "_custom_number_4", b"_custom_number_4", "_flowline_pressure", b"_flowline_pressure", "_gas", b"_gas", "_gas_injection", b"_gas_injection", "_gas_lift_injection_pressure", b"_gas_lift_injection_pressure", "_hours_on", b"_hours_on", "_ngl", b"_ngl", "_oil", b"_oil", "_operational_tag", b"_operational_tag", "_project", b"_project", "_steam_injection", b"_steam_injection", "_tubing_head_pressure", b"_tubing_head_pressure", "_vessel_separator_pressure", b"_vessel_separator_pressure", "_water", b"_water", "_water_injection", b"_water_injection", "bottom_hole_pressure", b"bottom_hole_pressure", "casing_head_pressure", b"casing_head_pressure", "choke", b"choke", "co2_injection", b"co2_injection", "custom_number_0", b"custom_number_0", "custom_number_1", b"custom_number_1", "custom_number_2", b"custom_number_2", "custom_number_3", b"custom_number_3", "custom_number_4", b"custom_number_4", "date", b"date", "field_mask", b"field_mask", "flowline_pressure", b"flowline_pressure", "gas", b"gas", "gas_injection", b"gas_injection", "gas_lift_injection_pressure", b"gas_lift_injection_pressure", "hours_on", b"hours_on", "ngl", b"ngl", "oil", b"oil", "operational_tag", b"operational_tag", "project", b"project", "steam_injection", b"steam_injection", "tubing_head_pressure", b"tubing_head_pressure", "vessel_separator_pressure", b"vessel_separator_pressure", "water", b"water", "water_injection", b"water_injection"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_bottom_hole_pressure", b"_bottom_hole_pressure", "_casing_head_pressure", b"_casing_head_pressure", "_choke", b"_choke", "_co2_injection", b"_co2_injection", "_custom_number_0", b"_custom_number_0", "_custom_number_1", b"_custom_number_1", "_custom_number_2", b"_custom_number_2", "_custom_number_3", b"_custom_number_3", "_custom_number_4", b"_custom_number_4", "_flowline_pressure", b"_flowline_pressure", "_gas", b"_gas", "_gas_injection", b"_gas_injection", "_gas_lift_injection_pressure", b"_gas_lift_injection_pressure", "_hours_on", b"_hours_on", "_ngl", b"_ngl", "_oil", b"_oil", "_operational_tag", b"_operational_tag", "_project", b"_project", "_steam_injection", b"_steam_injection", "_tubing_head_pressure", b"_tubing_head_pressure", "_vessel_separator_pressure", b"_vessel_separator_pressure", "_water", b"_water", "_water_injection", b"_water_injection", "bottom_hole_pressure", b"bottom_hole_pressure", "casing_head_pressure", b"casing_head_pressure", "choke", b"choke", "co2_injection", b"co2_injection", "custom_number_0", b"custom_number_0", "custom_number_1", b"custom_number_1", "custom_number_2", b"custom_number_2", "custom_number_3", b"custom_number_3", "custom_number_4", b"custom_number_4", "date", b"date", "field_mask", b"field_mask", "flowline_pressure", b"flowline_pressure", "gas", b"gas", "gas_injection", b"gas_injection", "gas_lift_injection_pressure", b"gas_lift_injection_pressure", "hours_on", b"hours_on", "ngl", b"ngl", "oil", b"oil", "operational_tag", b"operational_tag", "project", b"project", "steam_injection", b"steam_injection", "tubing_head_pressure", b"tubing_head_pressure", "vessel_separator_pressure", b"vessel_separator_pressure", "water", b"water", "water_injection", b"water_injection", "well", b"well"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_bottom_hole_pressure", b"_bottom_hole_pressure"]) -> typing_extensions.Literal["bottom_hole_pressure"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_casing_head_pressure", b"_casing_head_pressure"]) -> typing_extensions.Literal["casing_head_pressure"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_choke", b"_choke"]) -> typing_extensions.Literal["choke"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_co2_injection", b"_co2_injection"]) -> typing_extensions.Literal["co2_injection"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_0", b"_custom_number_0"]) -> typing_extensions.Literal["custom_number_0"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_1", b"_custom_number_1"]) -> typing_extensions.Literal["custom_number_1"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_2", b"_custom_number_2"]) -> typing_extensions.Literal["custom_number_2"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_3", b"_custom_number_3"]) -> typing_extensions.Literal["custom_number_3"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_4", b"_custom_number_4"]) -> typing_extensions.Literal["custom_number_4"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_flowline_pressure", b"_flowline_pressure"]) -> typing_extensions.Literal["flowline_pressure"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_gas", b"_gas"]) -> typing_extensions.Literal["gas"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_gas_injection", b"_gas_injection"]) -> typing_extensions.Literal["gas_injection"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_gas_lift_injection_pressure", b"_gas_lift_injection_pressure"]) -> typing_extensions.Literal["gas_lift_injection_pressure"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_hours_on", b"_hours_on"]) -> typing_extensions.Literal["hours_on"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_ngl", b"_ngl"]) -> typing_extensions.Literal["ngl"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_oil", b"_oil"]) -> typing_extensions.Literal["oil"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_operational_tag", b"_operational_tag"]) -> typing_extensions.Literal["operational_tag"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_project", b"_project"]) -> typing_extensions.Literal["project"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_steam_injection", b"_steam_injection"]) -> typing_extensions.Literal["steam_injection"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_tubing_head_pressure", b"_tubing_head_pressure"]) -> typing_extensions.Literal["tubing_head_pressure"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_vessel_separator_pressure", b"_vessel_separator_pressure"]) -> typing_extensions.Literal["vessel_separator_pressure"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_water", b"_water"]) -> typing_extensions.Literal["water"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_water_injection", b"_water_injection"]) -> typing_extensions.Literal["water_injection"] | None: ...

global___ExternalDailyProductionServiceUpsertRequest = ExternalDailyProductionServiceUpsertRequest

@typing_extensions.final
class ExternalDailyProductionServiceUpsertResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___ExternalDailyProductionServiceUpsertResponse = ExternalDailyProductionServiceUpsertResponse

@typing_extensions.final
class ExternalDailyProductionServiceDeleteByWellRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    WELL_FIELD_NUMBER: builtins.int
    DATE_RANGE_FIELD_NUMBER: builtins.int
    well: builtins.str
    @property
    def date_range(self) -> combocurve.common.v1.date_range_pb2.DateRange: ...
    def __init__(
        self,
        *,
        well: builtins.str = ...,
        date_range: combocurve.common.v1.date_range_pb2.DateRange | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["date_range", b"date_range"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["date_range", b"date_range", "well", b"well"]) -> None: ...

global___ExternalDailyProductionServiceDeleteByWellRequest = ExternalDailyProductionServiceDeleteByWellRequest

@typing_extensions.final
class ExternalDailyProductionServiceDeleteByWellResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___ExternalDailyProductionServiceDeleteByWellResponse = ExternalDailyProductionServiceDeleteByWellResponse
