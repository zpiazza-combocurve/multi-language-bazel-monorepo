"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import combocurve.common.v1.date_range_pb2
import google.protobuf.descriptor
import google.protobuf.field_mask_pb2
import google.protobuf.internal.containers
import google.protobuf.message
import google.protobuf.timestamp_pb2
import sys
import typing

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class MonthlyProductionServiceUpsertRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FIELD_MASK_FIELD_NUMBER: builtins.int
    WELL_FIELD_NUMBER: builtins.int
    DATE_FIELD_NUMBER: builtins.int
    PROJECT_FIELD_NUMBER: builtins.int
    CHOKE_FIELD_NUMBER: builtins.int
    CO2_INJECTION_FIELD_NUMBER: builtins.int
    DAYS_ON_FIELD_NUMBER: builtins.int
    GAS_FIELD_NUMBER: builtins.int
    GAS_INJECTION_FIELD_NUMBER: builtins.int
    NGL_FIELD_NUMBER: builtins.int
    OIL_FIELD_NUMBER: builtins.int
    STEAM_INJECTION_FIELD_NUMBER: builtins.int
    WATER_FIELD_NUMBER: builtins.int
    WATER_INJECTION_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_0_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_1_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_2_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_3_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_4_FIELD_NUMBER: builtins.int
    OPERATIONAL_TAG_FIELD_NUMBER: builtins.int
    @property
    def field_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """A list of fields to consider during this request. The default is all
        fields. API layers are responsible for implementing this behavior.
        """
    well: builtins.str
    """Required. The combination of `well` + `date` identifies a production
    record.
    """
    @property
    def date(self) -> google.protobuf.timestamp_pb2.Timestamp:
        """Required. The combination of `well` + `date` identifies a production
        record.
        """
    project: builtins.str
    """Project ID for the well this record corresponds to, or empty for
    company-level wells. This is used during insert but ignored for update.
    """
    choke: builtins.float
    co2_injection: builtins.float
    days_on: builtins.float
    gas: builtins.float
    gas_injection: builtins.float
    ngl: builtins.float
    oil: builtins.float
    steam_injection: builtins.float
    water: builtins.float
    water_injection: builtins.float
    custom_number_0: builtins.float
    custom_number_1: builtins.float
    custom_number_2: builtins.float
    custom_number_3: builtins.float
    custom_number_4: builtins.float
    operational_tag: builtins.str
    def __init__(
        self,
        *,
        field_mask: google.protobuf.field_mask_pb2.FieldMask | None = ...,
        well: builtins.str = ...,
        date: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        project: builtins.str | None = ...,
        choke: builtins.float | None = ...,
        co2_injection: builtins.float | None = ...,
        days_on: builtins.float | None = ...,
        gas: builtins.float | None = ...,
        gas_injection: builtins.float | None = ...,
        ngl: builtins.float | None = ...,
        oil: builtins.float | None = ...,
        steam_injection: builtins.float | None = ...,
        water: builtins.float | None = ...,
        water_injection: builtins.float | None = ...,
        custom_number_0: builtins.float | None = ...,
        custom_number_1: builtins.float | None = ...,
        custom_number_2: builtins.float | None = ...,
        custom_number_3: builtins.float | None = ...,
        custom_number_4: builtins.float | None = ...,
        operational_tag: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_choke", b"_choke", "_co2_injection", b"_co2_injection", "_custom_number_0", b"_custom_number_0", "_custom_number_1", b"_custom_number_1", "_custom_number_2", b"_custom_number_2", "_custom_number_3", b"_custom_number_3", "_custom_number_4", b"_custom_number_4", "_days_on", b"_days_on", "_gas", b"_gas", "_gas_injection", b"_gas_injection", "_ngl", b"_ngl", "_oil", b"_oil", "_operational_tag", b"_operational_tag", "_project", b"_project", "_steam_injection", b"_steam_injection", "_water", b"_water", "_water_injection", b"_water_injection", "choke", b"choke", "co2_injection", b"co2_injection", "custom_number_0", b"custom_number_0", "custom_number_1", b"custom_number_1", "custom_number_2", b"custom_number_2", "custom_number_3", b"custom_number_3", "custom_number_4", b"custom_number_4", "date", b"date", "days_on", b"days_on", "field_mask", b"field_mask", "gas", b"gas", "gas_injection", b"gas_injection", "ngl", b"ngl", "oil", b"oil", "operational_tag", b"operational_tag", "project", b"project", "steam_injection", b"steam_injection", "water", b"water", "water_injection", b"water_injection"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_choke", b"_choke", "_co2_injection", b"_co2_injection", "_custom_number_0", b"_custom_number_0", "_custom_number_1", b"_custom_number_1", "_custom_number_2", b"_custom_number_2", "_custom_number_3", b"_custom_number_3", "_custom_number_4", b"_custom_number_4", "_days_on", b"_days_on", "_gas", b"_gas", "_gas_injection", b"_gas_injection", "_ngl", b"_ngl", "_oil", b"_oil", "_operational_tag", b"_operational_tag", "_project", b"_project", "_steam_injection", b"_steam_injection", "_water", b"_water", "_water_injection", b"_water_injection", "choke", b"choke", "co2_injection", b"co2_injection", "custom_number_0", b"custom_number_0", "custom_number_1", b"custom_number_1", "custom_number_2", b"custom_number_2", "custom_number_3", b"custom_number_3", "custom_number_4", b"custom_number_4", "date", b"date", "days_on", b"days_on", "field_mask", b"field_mask", "gas", b"gas", "gas_injection", b"gas_injection", "ngl", b"ngl", "oil", b"oil", "operational_tag", b"operational_tag", "project", b"project", "steam_injection", b"steam_injection", "water", b"water", "water_injection", b"water_injection", "well", b"well"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_choke", b"_choke"]) -> typing_extensions.Literal["choke"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_co2_injection", b"_co2_injection"]) -> typing_extensions.Literal["co2_injection"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_0", b"_custom_number_0"]) -> typing_extensions.Literal["custom_number_0"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_1", b"_custom_number_1"]) -> typing_extensions.Literal["custom_number_1"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_2", b"_custom_number_2"]) -> typing_extensions.Literal["custom_number_2"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_3", b"_custom_number_3"]) -> typing_extensions.Literal["custom_number_3"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_4", b"_custom_number_4"]) -> typing_extensions.Literal["custom_number_4"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_days_on", b"_days_on"]) -> typing_extensions.Literal["days_on"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_gas", b"_gas"]) -> typing_extensions.Literal["gas"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_gas_injection", b"_gas_injection"]) -> typing_extensions.Literal["gas_injection"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_ngl", b"_ngl"]) -> typing_extensions.Literal["ngl"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_oil", b"_oil"]) -> typing_extensions.Literal["oil"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_operational_tag", b"_operational_tag"]) -> typing_extensions.Literal["operational_tag"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_project", b"_project"]) -> typing_extensions.Literal["project"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_steam_injection", b"_steam_injection"]) -> typing_extensions.Literal["steam_injection"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_water", b"_water"]) -> typing_extensions.Literal["water"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_water_injection", b"_water_injection"]) -> typing_extensions.Literal["water_injection"] | None: ...

global___MonthlyProductionServiceUpsertRequest = MonthlyProductionServiceUpsertRequest

@typing_extensions.final
class MonthlyProductionServiceUpsertResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___MonthlyProductionServiceUpsertResponse = MonthlyProductionServiceUpsertResponse

@typing_extensions.final
class MonthlyProductionServiceChangeToCompanyScopeRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    WELLS_FIELD_NUMBER: builtins.int
    @property
    def wells(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        wells: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["wells", b"wells"]) -> None: ...

global___MonthlyProductionServiceChangeToCompanyScopeRequest = MonthlyProductionServiceChangeToCompanyScopeRequest

@typing_extensions.final
class MonthlyProductionServiceChangeToCompanyScopeResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___MonthlyProductionServiceChangeToCompanyScopeResponse = MonthlyProductionServiceChangeToCompanyScopeResponse

@typing_extensions.final
class MonthlyProductionServiceFetchRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FIELD_MASK_FIELD_NUMBER: builtins.int
    WELLS_FIELD_NUMBER: builtins.int
    DATE_RANGE_FIELD_NUMBER: builtins.int
    ONLY_PHYSICAL_WELLS_FIELD_NUMBER: builtins.int
    @property
    def field_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """A list of fields to consider during this request. The default is all
        fields. API layers are responsible for implementing this behavior.
        """
    @property
    def wells(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """API layers are responsible for enforcing that the size of `wells` is
        reasonable for a single request.
        """
    @property
    def date_range(self) -> combocurve.common.v1.date_range_pb2.DateRange: ...
    only_physical_wells: builtins.bool
    def __init__(
        self,
        *,
        field_mask: google.protobuf.field_mask_pb2.FieldMask | None = ...,
        wells: collections.abc.Iterable[builtins.str] | None = ...,
        date_range: combocurve.common.v1.date_range_pb2.DateRange | None = ...,
        only_physical_wells: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_only_physical_wells", b"_only_physical_wells", "date_range", b"date_range", "field_mask", b"field_mask", "only_physical_wells", b"only_physical_wells"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_only_physical_wells", b"_only_physical_wells", "date_range", b"date_range", "field_mask", b"field_mask", "only_physical_wells", b"only_physical_wells", "wells", b"wells"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_only_physical_wells", b"_only_physical_wells"]) -> typing_extensions.Literal["only_physical_wells"] | None: ...

global___MonthlyProductionServiceFetchRequest = MonthlyProductionServiceFetchRequest

@typing_extensions.final
class MonthlyProductionServiceFetchResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATE_FIELD_NUMBER: builtins.int
    WELL_FIELD_NUMBER: builtins.int
    PROJECT_FIELD_NUMBER: builtins.int
    CHOKE_FIELD_NUMBER: builtins.int
    CO2_INJECTION_FIELD_NUMBER: builtins.int
    DAYS_ON_FIELD_NUMBER: builtins.int
    GAS_FIELD_NUMBER: builtins.int
    GAS_INJECTION_FIELD_NUMBER: builtins.int
    NGL_FIELD_NUMBER: builtins.int
    OIL_FIELD_NUMBER: builtins.int
    STEAM_INJECTION_FIELD_NUMBER: builtins.int
    WATER_FIELD_NUMBER: builtins.int
    WATER_INJECTION_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_0_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_1_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_2_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_3_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_4_FIELD_NUMBER: builtins.int
    OPERATIONAL_TAG_FIELD_NUMBER: builtins.int
    @property
    def date(self) -> google.protobuf.timestamp_pb2.Timestamp: ...
    well: builtins.str
    project: builtins.str
    choke: builtins.float
    co2_injection: builtins.float
    days_on: builtins.float
    gas: builtins.float
    gas_injection: builtins.float
    ngl: builtins.float
    oil: builtins.float
    steam_injection: builtins.float
    water: builtins.float
    water_injection: builtins.float
    custom_number_0: builtins.float
    custom_number_1: builtins.float
    custom_number_2: builtins.float
    custom_number_3: builtins.float
    custom_number_4: builtins.float
    operational_tag: builtins.str
    def __init__(
        self,
        *,
        date: google.protobuf.timestamp_pb2.Timestamp | None = ...,
        well: builtins.str = ...,
        project: builtins.str | None = ...,
        choke: builtins.float | None = ...,
        co2_injection: builtins.float | None = ...,
        days_on: builtins.float | None = ...,
        gas: builtins.float | None = ...,
        gas_injection: builtins.float | None = ...,
        ngl: builtins.float | None = ...,
        oil: builtins.float | None = ...,
        steam_injection: builtins.float | None = ...,
        water: builtins.float | None = ...,
        water_injection: builtins.float | None = ...,
        custom_number_0: builtins.float | None = ...,
        custom_number_1: builtins.float | None = ...,
        custom_number_2: builtins.float | None = ...,
        custom_number_3: builtins.float | None = ...,
        custom_number_4: builtins.float | None = ...,
        operational_tag: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_choke", b"_choke", "_co2_injection", b"_co2_injection", "_custom_number_0", b"_custom_number_0", "_custom_number_1", b"_custom_number_1", "_custom_number_2", b"_custom_number_2", "_custom_number_3", b"_custom_number_3", "_custom_number_4", b"_custom_number_4", "_days_on", b"_days_on", "_gas", b"_gas", "_gas_injection", b"_gas_injection", "_ngl", b"_ngl", "_oil", b"_oil", "_operational_tag", b"_operational_tag", "_project", b"_project", "_steam_injection", b"_steam_injection", "_water", b"_water", "_water_injection", b"_water_injection", "choke", b"choke", "co2_injection", b"co2_injection", "custom_number_0", b"custom_number_0", "custom_number_1", b"custom_number_1", "custom_number_2", b"custom_number_2", "custom_number_3", b"custom_number_3", "custom_number_4", b"custom_number_4", "date", b"date", "days_on", b"days_on", "gas", b"gas", "gas_injection", b"gas_injection", "ngl", b"ngl", "oil", b"oil", "operational_tag", b"operational_tag", "project", b"project", "steam_injection", b"steam_injection", "water", b"water", "water_injection", b"water_injection"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_choke", b"_choke", "_co2_injection", b"_co2_injection", "_custom_number_0", b"_custom_number_0", "_custom_number_1", b"_custom_number_1", "_custom_number_2", b"_custom_number_2", "_custom_number_3", b"_custom_number_3", "_custom_number_4", b"_custom_number_4", "_days_on", b"_days_on", "_gas", b"_gas", "_gas_injection", b"_gas_injection", "_ngl", b"_ngl", "_oil", b"_oil", "_operational_tag", b"_operational_tag", "_project", b"_project", "_steam_injection", b"_steam_injection", "_water", b"_water", "_water_injection", b"_water_injection", "choke", b"choke", "co2_injection", b"co2_injection", "custom_number_0", b"custom_number_0", "custom_number_1", b"custom_number_1", "custom_number_2", b"custom_number_2", "custom_number_3", b"custom_number_3", "custom_number_4", b"custom_number_4", "date", b"date", "days_on", b"days_on", "gas", b"gas", "gas_injection", b"gas_injection", "ngl", b"ngl", "oil", b"oil", "operational_tag", b"operational_tag", "project", b"project", "steam_injection", b"steam_injection", "water", b"water", "water_injection", b"water_injection", "well", b"well"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_choke", b"_choke"]) -> typing_extensions.Literal["choke"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_co2_injection", b"_co2_injection"]) -> typing_extensions.Literal["co2_injection"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_0", b"_custom_number_0"]) -> typing_extensions.Literal["custom_number_0"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_1", b"_custom_number_1"]) -> typing_extensions.Literal["custom_number_1"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_2", b"_custom_number_2"]) -> typing_extensions.Literal["custom_number_2"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_3", b"_custom_number_3"]) -> typing_extensions.Literal["custom_number_3"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_4", b"_custom_number_4"]) -> typing_extensions.Literal["custom_number_4"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_days_on", b"_days_on"]) -> typing_extensions.Literal["days_on"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_gas", b"_gas"]) -> typing_extensions.Literal["gas"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_gas_injection", b"_gas_injection"]) -> typing_extensions.Literal["gas_injection"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_ngl", b"_ngl"]) -> typing_extensions.Literal["ngl"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_oil", b"_oil"]) -> typing_extensions.Literal["oil"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_operational_tag", b"_operational_tag"]) -> typing_extensions.Literal["operational_tag"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_project", b"_project"]) -> typing_extensions.Literal["project"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_steam_injection", b"_steam_injection"]) -> typing_extensions.Literal["steam_injection"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_water", b"_water"]) -> typing_extensions.Literal["water"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_water_injection", b"_water_injection"]) -> typing_extensions.Literal["water_injection"] | None: ...

global___MonthlyProductionServiceFetchResponse = MonthlyProductionServiceFetchResponse

@typing_extensions.final
class MonthlyProductionServiceFetchByWellRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FIELD_MASK_FIELD_NUMBER: builtins.int
    WELLS_FIELD_NUMBER: builtins.int
    DATE_RANGE_FIELD_NUMBER: builtins.int
    ONLY_PHYSICAL_WELLS_FIELD_NUMBER: builtins.int
    @property
    def field_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """A list of fields to consider during this request. The default is all
        fields. API layers are responsible for implementing this behavior.
        """
    @property
    def wells(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """API layers are responsible for enforcing that the size of `wells` is
        reasonable for a single request.
        """
    @property
    def date_range(self) -> combocurve.common.v1.date_range_pb2.DateRange: ...
    only_physical_wells: builtins.bool
    def __init__(
        self,
        *,
        field_mask: google.protobuf.field_mask_pb2.FieldMask | None = ...,
        wells: collections.abc.Iterable[builtins.str] | None = ...,
        date_range: combocurve.common.v1.date_range_pb2.DateRange | None = ...,
        only_physical_wells: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_only_physical_wells", b"_only_physical_wells", "date_range", b"date_range", "field_mask", b"field_mask", "only_physical_wells", b"only_physical_wells"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_only_physical_wells", b"_only_physical_wells", "date_range", b"date_range", "field_mask", b"field_mask", "only_physical_wells", b"only_physical_wells", "wells", b"wells"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_only_physical_wells", b"_only_physical_wells"]) -> typing_extensions.Literal["only_physical_wells"] | None: ...

global___MonthlyProductionServiceFetchByWellRequest = MonthlyProductionServiceFetchByWellRequest

@typing_extensions.final
class MonthlyProductionServiceFetchByWellResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DATE_FIELD_NUMBER: builtins.int
    WELL_FIELD_NUMBER: builtins.int
    PROJECT_FIELD_NUMBER: builtins.int
    CHOKE_FIELD_NUMBER: builtins.int
    CO2_INJECTION_FIELD_NUMBER: builtins.int
    DAYS_ON_FIELD_NUMBER: builtins.int
    GAS_FIELD_NUMBER: builtins.int
    GAS_INJECTION_FIELD_NUMBER: builtins.int
    NGL_FIELD_NUMBER: builtins.int
    OIL_FIELD_NUMBER: builtins.int
    STEAM_INJECTION_FIELD_NUMBER: builtins.int
    WATER_FIELD_NUMBER: builtins.int
    WATER_INJECTION_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_0_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_1_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_2_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_3_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_4_FIELD_NUMBER: builtins.int
    @property
    def date(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[google.protobuf.timestamp_pb2.Timestamp]: ...
    well: builtins.str
    project: builtins.str
    @property
    def choke(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    @property
    def co2_injection(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    @property
    def days_on(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    @property
    def gas(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    @property
    def gas_injection(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    @property
    def ngl(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    @property
    def oil(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    @property
    def steam_injection(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    @property
    def water(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    @property
    def water_injection(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    @property
    def custom_number_0(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    @property
    def custom_number_1(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    @property
    def custom_number_2(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    @property
    def custom_number_3(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    @property
    def custom_number_4(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]: ...
    def __init__(
        self,
        *,
        date: collections.abc.Iterable[google.protobuf.timestamp_pb2.Timestamp] | None = ...,
        well: builtins.str = ...,
        project: builtins.str | None = ...,
        choke: collections.abc.Iterable[builtins.float] | None = ...,
        co2_injection: collections.abc.Iterable[builtins.float] | None = ...,
        days_on: collections.abc.Iterable[builtins.float] | None = ...,
        gas: collections.abc.Iterable[builtins.float] | None = ...,
        gas_injection: collections.abc.Iterable[builtins.float] | None = ...,
        ngl: collections.abc.Iterable[builtins.float] | None = ...,
        oil: collections.abc.Iterable[builtins.float] | None = ...,
        steam_injection: collections.abc.Iterable[builtins.float] | None = ...,
        water: collections.abc.Iterable[builtins.float] | None = ...,
        water_injection: collections.abc.Iterable[builtins.float] | None = ...,
        custom_number_0: collections.abc.Iterable[builtins.float] | None = ...,
        custom_number_1: collections.abc.Iterable[builtins.float] | None = ...,
        custom_number_2: collections.abc.Iterable[builtins.float] | None = ...,
        custom_number_3: collections.abc.Iterable[builtins.float] | None = ...,
        custom_number_4: collections.abc.Iterable[builtins.float] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_project", b"_project", "project", b"project"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_project", b"_project", "choke", b"choke", "co2_injection", b"co2_injection", "custom_number_0", b"custom_number_0", "custom_number_1", b"custom_number_1", "custom_number_2", b"custom_number_2", "custom_number_3", b"custom_number_3", "custom_number_4", b"custom_number_4", "date", b"date", "days_on", b"days_on", "gas", b"gas", "gas_injection", b"gas_injection", "ngl", b"ngl", "oil", b"oil", "project", b"project", "steam_injection", b"steam_injection", "water", b"water", "water_injection", b"water_injection", "well", b"well"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_project", b"_project"]) -> typing_extensions.Literal["project"] | None: ...

global___MonthlyProductionServiceFetchByWellResponse = MonthlyProductionServiceFetchByWellResponse

@typing_extensions.final
class MonthlyProductionServiceSumByWellRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FIELD_MASK_FIELD_NUMBER: builtins.int
    WELLS_FIELD_NUMBER: builtins.int
    DATE_RANGE_FIELD_NUMBER: builtins.int
    ONLY_PHYSICAL_WELLS_FIELD_NUMBER: builtins.int
    @property
    def field_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """A list of fields to consider during this request. The default is all
        fields. API layers are responsible for implementing this behavior.
        """
    @property
    def wells(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """API layers are responsible for enforcing that the size of `wells` is
        reasonable for a single request.
        """
    @property
    def date_range(self) -> combocurve.common.v1.date_range_pb2.DateRange: ...
    only_physical_wells: builtins.bool
    def __init__(
        self,
        *,
        field_mask: google.protobuf.field_mask_pb2.FieldMask | None = ...,
        wells: collections.abc.Iterable[builtins.str] | None = ...,
        date_range: combocurve.common.v1.date_range_pb2.DateRange | None = ...,
        only_physical_wells: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_only_physical_wells", b"_only_physical_wells", "date_range", b"date_range", "field_mask", b"field_mask", "only_physical_wells", b"only_physical_wells"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_only_physical_wells", b"_only_physical_wells", "date_range", b"date_range", "field_mask", b"field_mask", "only_physical_wells", b"only_physical_wells", "wells", b"wells"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_only_physical_wells", b"_only_physical_wells"]) -> typing_extensions.Literal["only_physical_wells"] | None: ...

global___MonthlyProductionServiceSumByWellRequest = MonthlyProductionServiceSumByWellRequest

@typing_extensions.final
class MonthlyProductionServiceSumByWellResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    WELL_FIELD_NUMBER: builtins.int
    PROJECT_FIELD_NUMBER: builtins.int
    CHOKE_FIELD_NUMBER: builtins.int
    CO2_INJECTION_FIELD_NUMBER: builtins.int
    DAYS_ON_FIELD_NUMBER: builtins.int
    GAS_FIELD_NUMBER: builtins.int
    GAS_INJECTION_FIELD_NUMBER: builtins.int
    NGL_FIELD_NUMBER: builtins.int
    OIL_FIELD_NUMBER: builtins.int
    STEAM_INJECTION_FIELD_NUMBER: builtins.int
    WATER_FIELD_NUMBER: builtins.int
    WATER_INJECTION_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_0_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_1_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_2_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_3_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_4_FIELD_NUMBER: builtins.int
    well: builtins.str
    """*
    NOTE: Keep this message in sync with
    `MonthlyProductionServiceFetchResponse` for the overlapping fields.
    """
    project: builtins.str
    choke: builtins.float
    co2_injection: builtins.float
    days_on: builtins.float
    gas: builtins.float
    gas_injection: builtins.float
    ngl: builtins.float
    oil: builtins.float
    steam_injection: builtins.float
    water: builtins.float
    water_injection: builtins.float
    custom_number_0: builtins.float
    custom_number_1: builtins.float
    custom_number_2: builtins.float
    custom_number_3: builtins.float
    custom_number_4: builtins.float
    def __init__(
        self,
        *,
        well: builtins.str = ...,
        project: builtins.str | None = ...,
        choke: builtins.float | None = ...,
        co2_injection: builtins.float | None = ...,
        days_on: builtins.float | None = ...,
        gas: builtins.float | None = ...,
        gas_injection: builtins.float | None = ...,
        ngl: builtins.float | None = ...,
        oil: builtins.float | None = ...,
        steam_injection: builtins.float | None = ...,
        water: builtins.float | None = ...,
        water_injection: builtins.float | None = ...,
        custom_number_0: builtins.float | None = ...,
        custom_number_1: builtins.float | None = ...,
        custom_number_2: builtins.float | None = ...,
        custom_number_3: builtins.float | None = ...,
        custom_number_4: builtins.float | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_choke", b"_choke", "_co2_injection", b"_co2_injection", "_custom_number_0", b"_custom_number_0", "_custom_number_1", b"_custom_number_1", "_custom_number_2", b"_custom_number_2", "_custom_number_3", b"_custom_number_3", "_custom_number_4", b"_custom_number_4", "_days_on", b"_days_on", "_gas", b"_gas", "_gas_injection", b"_gas_injection", "_ngl", b"_ngl", "_oil", b"_oil", "_project", b"_project", "_steam_injection", b"_steam_injection", "_water", b"_water", "_water_injection", b"_water_injection", "choke", b"choke", "co2_injection", b"co2_injection", "custom_number_0", b"custom_number_0", "custom_number_1", b"custom_number_1", "custom_number_2", b"custom_number_2", "custom_number_3", b"custom_number_3", "custom_number_4", b"custom_number_4", "days_on", b"days_on", "gas", b"gas", "gas_injection", b"gas_injection", "ngl", b"ngl", "oil", b"oil", "project", b"project", "steam_injection", b"steam_injection", "water", b"water", "water_injection", b"water_injection"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_choke", b"_choke", "_co2_injection", b"_co2_injection", "_custom_number_0", b"_custom_number_0", "_custom_number_1", b"_custom_number_1", "_custom_number_2", b"_custom_number_2", "_custom_number_3", b"_custom_number_3", "_custom_number_4", b"_custom_number_4", "_days_on", b"_days_on", "_gas", b"_gas", "_gas_injection", b"_gas_injection", "_ngl", b"_ngl", "_oil", b"_oil", "_project", b"_project", "_steam_injection", b"_steam_injection", "_water", b"_water", "_water_injection", b"_water_injection", "choke", b"choke", "co2_injection", b"co2_injection", "custom_number_0", b"custom_number_0", "custom_number_1", b"custom_number_1", "custom_number_2", b"custom_number_2", "custom_number_3", b"custom_number_3", "custom_number_4", b"custom_number_4", "days_on", b"days_on", "gas", b"gas", "gas_injection", b"gas_injection", "ngl", b"ngl", "oil", b"oil", "project", b"project", "steam_injection", b"steam_injection", "water", b"water", "water_injection", b"water_injection", "well", b"well"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_choke", b"_choke"]) -> typing_extensions.Literal["choke"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_co2_injection", b"_co2_injection"]) -> typing_extensions.Literal["co2_injection"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_0", b"_custom_number_0"]) -> typing_extensions.Literal["custom_number_0"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_1", b"_custom_number_1"]) -> typing_extensions.Literal["custom_number_1"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_2", b"_custom_number_2"]) -> typing_extensions.Literal["custom_number_2"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_3", b"_custom_number_3"]) -> typing_extensions.Literal["custom_number_3"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_4", b"_custom_number_4"]) -> typing_extensions.Literal["custom_number_4"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_days_on", b"_days_on"]) -> typing_extensions.Literal["days_on"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_gas", b"_gas"]) -> typing_extensions.Literal["gas"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_gas_injection", b"_gas_injection"]) -> typing_extensions.Literal["gas_injection"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_ngl", b"_ngl"]) -> typing_extensions.Literal["ngl"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_oil", b"_oil"]) -> typing_extensions.Literal["oil"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_project", b"_project"]) -> typing_extensions.Literal["project"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_steam_injection", b"_steam_injection"]) -> typing_extensions.Literal["steam_injection"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_water", b"_water"]) -> typing_extensions.Literal["water"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_water_injection", b"_water_injection"]) -> typing_extensions.Literal["water_injection"] | None: ...

global___MonthlyProductionServiceSumByWellResponse = MonthlyProductionServiceSumByWellResponse

@typing_extensions.final
class MonthlyProductionServiceCountByWellRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FIELD_MASK_FIELD_NUMBER: builtins.int
    WELLS_FIELD_NUMBER: builtins.int
    DATE_RANGE_FIELD_NUMBER: builtins.int
    ONLY_PHYSICAL_WELLS_FIELD_NUMBER: builtins.int
    @property
    def field_mask(self) -> google.protobuf.field_mask_pb2.FieldMask:
        """A list of fields to consider during this request. The default is all
        fields. API layers are responsible for implementing this behavior.
        """
    @property
    def wells(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """API layers are responsible for enforcing that the size of `wells` is
        reasonable for a single request.
        """
    @property
    def date_range(self) -> combocurve.common.v1.date_range_pb2.DateRange: ...
    only_physical_wells: builtins.bool
    def __init__(
        self,
        *,
        field_mask: google.protobuf.field_mask_pb2.FieldMask | None = ...,
        wells: collections.abc.Iterable[builtins.str] | None = ...,
        date_range: combocurve.common.v1.date_range_pb2.DateRange | None = ...,
        only_physical_wells: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_only_physical_wells", b"_only_physical_wells", "date_range", b"date_range", "field_mask", b"field_mask", "only_physical_wells", b"only_physical_wells"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_only_physical_wells", b"_only_physical_wells", "date_range", b"date_range", "field_mask", b"field_mask", "only_physical_wells", b"only_physical_wells", "wells", b"wells"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_only_physical_wells", b"_only_physical_wells"]) -> typing_extensions.Literal["only_physical_wells"] | None: ...

global___MonthlyProductionServiceCountByWellRequest = MonthlyProductionServiceCountByWellRequest

@typing_extensions.final
class MonthlyProductionServiceCountByWellResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    WELL_FIELD_NUMBER: builtins.int
    PROJECT_FIELD_NUMBER: builtins.int
    CHOKE_FIELD_NUMBER: builtins.int
    CO2_INJECTION_FIELD_NUMBER: builtins.int
    DAYS_ON_FIELD_NUMBER: builtins.int
    GAS_FIELD_NUMBER: builtins.int
    GAS_INJECTION_FIELD_NUMBER: builtins.int
    NGL_FIELD_NUMBER: builtins.int
    OIL_FIELD_NUMBER: builtins.int
    STEAM_INJECTION_FIELD_NUMBER: builtins.int
    WATER_FIELD_NUMBER: builtins.int
    WATER_INJECTION_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_0_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_1_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_2_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_3_FIELD_NUMBER: builtins.int
    CUSTOM_NUMBER_4_FIELD_NUMBER: builtins.int
    well: builtins.str
    """*
    NOTE: Keep this message in sync with
    `MonthlyProductionServiceFetchResponse` for the overlapping fields.
    """
    project: builtins.str
    choke: builtins.float
    co2_injection: builtins.float
    days_on: builtins.float
    gas: builtins.float
    gas_injection: builtins.float
    ngl: builtins.float
    oil: builtins.float
    steam_injection: builtins.float
    water: builtins.float
    water_injection: builtins.float
    custom_number_0: builtins.float
    custom_number_1: builtins.float
    custom_number_2: builtins.float
    custom_number_3: builtins.float
    custom_number_4: builtins.float
    def __init__(
        self,
        *,
        well: builtins.str = ...,
        project: builtins.str | None = ...,
        choke: builtins.float | None = ...,
        co2_injection: builtins.float | None = ...,
        days_on: builtins.float | None = ...,
        gas: builtins.float | None = ...,
        gas_injection: builtins.float | None = ...,
        ngl: builtins.float | None = ...,
        oil: builtins.float | None = ...,
        steam_injection: builtins.float | None = ...,
        water: builtins.float | None = ...,
        water_injection: builtins.float | None = ...,
        custom_number_0: builtins.float | None = ...,
        custom_number_1: builtins.float | None = ...,
        custom_number_2: builtins.float | None = ...,
        custom_number_3: builtins.float | None = ...,
        custom_number_4: builtins.float | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_choke", b"_choke", "_co2_injection", b"_co2_injection", "_custom_number_0", b"_custom_number_0", "_custom_number_1", b"_custom_number_1", "_custom_number_2", b"_custom_number_2", "_custom_number_3", b"_custom_number_3", "_custom_number_4", b"_custom_number_4", "_days_on", b"_days_on", "_gas", b"_gas", "_gas_injection", b"_gas_injection", "_ngl", b"_ngl", "_oil", b"_oil", "_project", b"_project", "_steam_injection", b"_steam_injection", "_water", b"_water", "_water_injection", b"_water_injection", "choke", b"choke", "co2_injection", b"co2_injection", "custom_number_0", b"custom_number_0", "custom_number_1", b"custom_number_1", "custom_number_2", b"custom_number_2", "custom_number_3", b"custom_number_3", "custom_number_4", b"custom_number_4", "days_on", b"days_on", "gas", b"gas", "gas_injection", b"gas_injection", "ngl", b"ngl", "oil", b"oil", "project", b"project", "steam_injection", b"steam_injection", "water", b"water", "water_injection", b"water_injection"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_choke", b"_choke", "_co2_injection", b"_co2_injection", "_custom_number_0", b"_custom_number_0", "_custom_number_1", b"_custom_number_1", "_custom_number_2", b"_custom_number_2", "_custom_number_3", b"_custom_number_3", "_custom_number_4", b"_custom_number_4", "_days_on", b"_days_on", "_gas", b"_gas", "_gas_injection", b"_gas_injection", "_ngl", b"_ngl", "_oil", b"_oil", "_project", b"_project", "_steam_injection", b"_steam_injection", "_water", b"_water", "_water_injection", b"_water_injection", "choke", b"choke", "co2_injection", b"co2_injection", "custom_number_0", b"custom_number_0", "custom_number_1", b"custom_number_1", "custom_number_2", b"custom_number_2", "custom_number_3", b"custom_number_3", "custom_number_4", b"custom_number_4", "days_on", b"days_on", "gas", b"gas", "gas_injection", b"gas_injection", "ngl", b"ngl", "oil", b"oil", "project", b"project", "steam_injection", b"steam_injection", "water", b"water", "water_injection", b"water_injection", "well", b"well"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_choke", b"_choke"]) -> typing_extensions.Literal["choke"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_co2_injection", b"_co2_injection"]) -> typing_extensions.Literal["co2_injection"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_0", b"_custom_number_0"]) -> typing_extensions.Literal["custom_number_0"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_1", b"_custom_number_1"]) -> typing_extensions.Literal["custom_number_1"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_2", b"_custom_number_2"]) -> typing_extensions.Literal["custom_number_2"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_3", b"_custom_number_3"]) -> typing_extensions.Literal["custom_number_3"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_custom_number_4", b"_custom_number_4"]) -> typing_extensions.Literal["custom_number_4"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_days_on", b"_days_on"]) -> typing_extensions.Literal["days_on"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_gas", b"_gas"]) -> typing_extensions.Literal["gas"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_gas_injection", b"_gas_injection"]) -> typing_extensions.Literal["gas_injection"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_ngl", b"_ngl"]) -> typing_extensions.Literal["ngl"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_oil", b"_oil"]) -> typing_extensions.Literal["oil"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_project", b"_project"]) -> typing_extensions.Literal["project"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_steam_injection", b"_steam_injection"]) -> typing_extensions.Literal["steam_injection"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_water", b"_water"]) -> typing_extensions.Literal["water"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_water_injection", b"_water_injection"]) -> typing_extensions.Literal["water_injection"] | None: ...

global___MonthlyProductionServiceCountByWellResponse = MonthlyProductionServiceCountByWellResponse

@typing_extensions.final
class MonthlyProductionServiceDeleteByProjectRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PROJECT_FIELD_NUMBER: builtins.int
    project: builtins.str
    def __init__(
        self,
        *,
        project: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["project", b"project"]) -> None: ...

global___MonthlyProductionServiceDeleteByProjectRequest = MonthlyProductionServiceDeleteByProjectRequest

@typing_extensions.final
class MonthlyProductionServiceDeleteByProjectResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___MonthlyProductionServiceDeleteByProjectResponse = MonthlyProductionServiceDeleteByProjectResponse

@typing_extensions.final
class MonthlyProductionServiceDeleteByWellRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    WELL_FIELD_NUMBER: builtins.int
    DATE_RANGE_FIELD_NUMBER: builtins.int
    well: builtins.str
    @property
    def date_range(self) -> combocurve.common.v1.date_range_pb2.DateRange: ...
    def __init__(
        self,
        *,
        well: builtins.str = ...,
        date_range: combocurve.common.v1.date_range_pb2.DateRange | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["date_range", b"date_range"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["date_range", b"date_range", "well", b"well"]) -> None: ...

global___MonthlyProductionServiceDeleteByWellRequest = MonthlyProductionServiceDeleteByWellRequest

@typing_extensions.final
class MonthlyProductionServiceDeleteByWellResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___MonthlyProductionServiceDeleteByWellResponse = MonthlyProductionServiceDeleteByWellResponse

@typing_extensions.final
class MonthlyProductionServiceDeleteByManyWellsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    WELLS_FIELD_NUMBER: builtins.int
    @property
    def wells(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        wells: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["wells", b"wells"]) -> None: ...

global___MonthlyProductionServiceDeleteByManyWellsRequest = MonthlyProductionServiceDeleteByManyWellsRequest

@typing_extensions.final
class MonthlyProductionServiceDeleteByManyWellsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___MonthlyProductionServiceDeleteByManyWellsResponse = MonthlyProductionServiceDeleteByManyWellsResponse
