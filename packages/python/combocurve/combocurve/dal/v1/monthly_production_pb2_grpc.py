# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from combocurve.dal.v1 import monthly_production_pb2 as combocurve_dot_dal_dot_v1_dot_monthly__production__pb2


class MonthlyProductionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Upsert = channel.stream_unary(
                '/combocurve.dal.v1.MonthlyProductionService/Upsert',
                request_serializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceUpsertRequest.SerializeToString,
                response_deserializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceUpsertResponse.FromString,
                )
        self.ChangeToCompanyScope = channel.unary_unary(
                '/combocurve.dal.v1.MonthlyProductionService/ChangeToCompanyScope',
                request_serializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceChangeToCompanyScopeRequest.SerializeToString,
                response_deserializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceChangeToCompanyScopeResponse.FromString,
                )
        self.Fetch = channel.unary_stream(
                '/combocurve.dal.v1.MonthlyProductionService/Fetch',
                request_serializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceFetchRequest.SerializeToString,
                response_deserializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceFetchResponse.FromString,
                )
        self.FetchByWell = channel.unary_stream(
                '/combocurve.dal.v1.MonthlyProductionService/FetchByWell',
                request_serializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceFetchByWellRequest.SerializeToString,
                response_deserializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceFetchByWellResponse.FromString,
                )
        self.SumByWell = channel.unary_stream(
                '/combocurve.dal.v1.MonthlyProductionService/SumByWell',
                request_serializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceSumByWellRequest.SerializeToString,
                response_deserializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceSumByWellResponse.FromString,
                )
        self.CountByWell = channel.unary_stream(
                '/combocurve.dal.v1.MonthlyProductionService/CountByWell',
                request_serializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceCountByWellRequest.SerializeToString,
                response_deserializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceCountByWellResponse.FromString,
                )
        self.DeleteByProject = channel.unary_unary(
                '/combocurve.dal.v1.MonthlyProductionService/DeleteByProject',
                request_serializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceDeleteByProjectRequest.SerializeToString,
                response_deserializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceDeleteByProjectResponse.FromString,
                )
        self.DeleteByWell = channel.unary_unary(
                '/combocurve.dal.v1.MonthlyProductionService/DeleteByWell',
                request_serializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceDeleteByWellRequest.SerializeToString,
                response_deserializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceDeleteByWellResponse.FromString,
                )
        self.DeleteByManyWells = channel.unary_unary(
                '/combocurve.dal.v1.MonthlyProductionService/DeleteByManyWells',
                request_serializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceDeleteByManyWellsRequest.SerializeToString,
                response_deserializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceDeleteByManyWellsResponse.FromString,
                )


class MonthlyProductionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Upsert(self, request_iterator, context):
        """Upsert monthly production data for multiple wells.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeToCompanyScope(self, request, context):
        """Update monthly production data for multiple wells, when the wells are changed to company scope.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Fetch(self, request, context):
        """Fetch monthly production data for multiple wells. Results are guaranteed to
        be sorted by well, then by date.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchByWell(self, request, context):
        """Fetch monthly production data for multiple wells. Returns a column-structured result per well.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SumByWell(self, request, context):
        """Calculate the sum of monthly production phases for multiple wells.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountByWell(self, request, context):
        """Calculate the amount of values of monthly production phases for multiple wells.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteByProject(self, request, context):
        """Delete all production data for the given project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteByWell(self, request, context):
        """Delete production data for the given well. An optional date range can be
        provided to restrict the production data points to be deleted.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteByManyWells(self, request, context):
        """Delete all production data for the given wells.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MonthlyProductionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Upsert': grpc.stream_unary_rpc_method_handler(
                    servicer.Upsert,
                    request_deserializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceUpsertRequest.FromString,
                    response_serializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceUpsertResponse.SerializeToString,
            ),
            'ChangeToCompanyScope': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeToCompanyScope,
                    request_deserializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceChangeToCompanyScopeRequest.FromString,
                    response_serializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceChangeToCompanyScopeResponse.SerializeToString,
            ),
            'Fetch': grpc.unary_stream_rpc_method_handler(
                    servicer.Fetch,
                    request_deserializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceFetchRequest.FromString,
                    response_serializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceFetchResponse.SerializeToString,
            ),
            'FetchByWell': grpc.unary_stream_rpc_method_handler(
                    servicer.FetchByWell,
                    request_deserializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceFetchByWellRequest.FromString,
                    response_serializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceFetchByWellResponse.SerializeToString,
            ),
            'SumByWell': grpc.unary_stream_rpc_method_handler(
                    servicer.SumByWell,
                    request_deserializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceSumByWellRequest.FromString,
                    response_serializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceSumByWellResponse.SerializeToString,
            ),
            'CountByWell': grpc.unary_stream_rpc_method_handler(
                    servicer.CountByWell,
                    request_deserializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceCountByWellRequest.FromString,
                    response_serializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceCountByWellResponse.SerializeToString,
            ),
            'DeleteByProject': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteByProject,
                    request_deserializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceDeleteByProjectRequest.FromString,
                    response_serializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceDeleteByProjectResponse.SerializeToString,
            ),
            'DeleteByWell': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteByWell,
                    request_deserializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceDeleteByWellRequest.FromString,
                    response_serializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceDeleteByWellResponse.SerializeToString,
            ),
            'DeleteByManyWells': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteByManyWells,
                    request_deserializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceDeleteByManyWellsRequest.FromString,
                    response_serializer=combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceDeleteByManyWellsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'combocurve.dal.v1.MonthlyProductionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MonthlyProductionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Upsert(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/combocurve.dal.v1.MonthlyProductionService/Upsert',
            combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceUpsertRequest.SerializeToString,
            combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceUpsertResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeToCompanyScope(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/combocurve.dal.v1.MonthlyProductionService/ChangeToCompanyScope',
            combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceChangeToCompanyScopeRequest.SerializeToString,
            combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceChangeToCompanyScopeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Fetch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/combocurve.dal.v1.MonthlyProductionService/Fetch',
            combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceFetchRequest.SerializeToString,
            combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceFetchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchByWell(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/combocurve.dal.v1.MonthlyProductionService/FetchByWell',
            combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceFetchByWellRequest.SerializeToString,
            combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceFetchByWellResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SumByWell(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/combocurve.dal.v1.MonthlyProductionService/SumByWell',
            combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceSumByWellRequest.SerializeToString,
            combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceSumByWellResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CountByWell(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/combocurve.dal.v1.MonthlyProductionService/CountByWell',
            combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceCountByWellRequest.SerializeToString,
            combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceCountByWellResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteByProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/combocurve.dal.v1.MonthlyProductionService/DeleteByProject',
            combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceDeleteByProjectRequest.SerializeToString,
            combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceDeleteByProjectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteByWell(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/combocurve.dal.v1.MonthlyProductionService/DeleteByWell',
            combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceDeleteByWellRequest.SerializeToString,
            combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceDeleteByWellResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteByManyWells(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/combocurve.dal.v1.MonthlyProductionService/DeleteByManyWells',
            combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceDeleteByManyWellsRequest.SerializeToString,
            combocurve_dot_dal_dot_v1_dot_monthly__production__pb2.MonthlyProductionServiceDeleteByManyWellsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
