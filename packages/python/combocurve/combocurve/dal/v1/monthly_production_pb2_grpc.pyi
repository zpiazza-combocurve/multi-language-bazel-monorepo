"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import combocurve.dal.v1.monthly_production_pb2
import grpc

class MonthlyProductionServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    Upsert: grpc.StreamUnaryMultiCallable[
        combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceUpsertRequest,
        combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceUpsertResponse,
    ]
    """Upsert monthly production data for multiple wells."""
    ChangeToCompanyScope: grpc.UnaryUnaryMultiCallable[
        combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceChangeToCompanyScopeRequest,
        combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceChangeToCompanyScopeResponse,
    ]
    """Update monthly production data for multiple wells, when the wells are changed to company scope."""
    Fetch: grpc.UnaryStreamMultiCallable[
        combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceFetchRequest,
        combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceFetchResponse,
    ]
    """Fetch monthly production data for multiple wells. Results are guaranteed to
    be sorted by well, then by date.
    """
    FetchByWell: grpc.UnaryStreamMultiCallable[
        combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceFetchByWellRequest,
        combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceFetchByWellResponse,
    ]
    """Fetch monthly production data for multiple wells. Returns a column-structured result per well."""
    SumByWell: grpc.UnaryStreamMultiCallable[
        combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceSumByWellRequest,
        combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceSumByWellResponse,
    ]
    """Calculate the sum of monthly production phases for multiple wells."""
    CountByWell: grpc.UnaryStreamMultiCallable[
        combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceCountByWellRequest,
        combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceCountByWellResponse,
    ]
    """Calculate the amount of values of monthly production phases for multiple wells."""
    DeleteByProject: grpc.UnaryUnaryMultiCallable[
        combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceDeleteByProjectRequest,
        combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceDeleteByProjectResponse,
    ]
    """Delete all production data for the given project."""
    DeleteByWell: grpc.UnaryUnaryMultiCallable[
        combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceDeleteByWellRequest,
        combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceDeleteByWellResponse,
    ]
    """Delete production data for the given well. An optional date range can be
    provided to restrict the production data points to be deleted.
    """
    DeleteByManyWells: grpc.UnaryUnaryMultiCallable[
        combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceDeleteByManyWellsRequest,
        combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceDeleteByManyWellsResponse,
    ]
    """Delete all production data for the given wells."""

class MonthlyProductionServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def Upsert(
        self,
        request_iterator: collections.abc.Iterator[combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceUpsertRequest],
        context: grpc.ServicerContext,
    ) -> combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceUpsertResponse:
        """Upsert monthly production data for multiple wells."""
    @abc.abstractmethod
    def ChangeToCompanyScope(
        self,
        request: combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceChangeToCompanyScopeRequest,
        context: grpc.ServicerContext,
    ) -> combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceChangeToCompanyScopeResponse:
        """Update monthly production data for multiple wells, when the wells are changed to company scope."""
    @abc.abstractmethod
    def Fetch(
        self,
        request: combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceFetchRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceFetchResponse]:
        """Fetch monthly production data for multiple wells. Results are guaranteed to
        be sorted by well, then by date.
        """
    @abc.abstractmethod
    def FetchByWell(
        self,
        request: combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceFetchByWellRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceFetchByWellResponse]:
        """Fetch monthly production data for multiple wells. Returns a column-structured result per well."""
    @abc.abstractmethod
    def SumByWell(
        self,
        request: combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceSumByWellRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceSumByWellResponse]:
        """Calculate the sum of monthly production phases for multiple wells."""
    @abc.abstractmethod
    def CountByWell(
        self,
        request: combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceCountByWellRequest,
        context: grpc.ServicerContext,
    ) -> collections.abc.Iterator[combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceCountByWellResponse]:
        """Calculate the amount of values of monthly production phases for multiple wells."""
    @abc.abstractmethod
    def DeleteByProject(
        self,
        request: combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceDeleteByProjectRequest,
        context: grpc.ServicerContext,
    ) -> combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceDeleteByProjectResponse:
        """Delete all production data for the given project."""
    @abc.abstractmethod
    def DeleteByWell(
        self,
        request: combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceDeleteByWellRequest,
        context: grpc.ServicerContext,
    ) -> combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceDeleteByWellResponse:
        """Delete production data for the given well. An optional date range can be
        provided to restrict the production data points to be deleted.
        """
    @abc.abstractmethod
    def DeleteByManyWells(
        self,
        request: combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceDeleteByManyWellsRequest,
        context: grpc.ServicerContext,
    ) -> combocurve.dal.v1.monthly_production_pb2.MonthlyProductionServiceDeleteByManyWellsResponse:
        """Delete all production data for the given wells."""

def add_MonthlyProductionServiceServicer_to_server(servicer: MonthlyProductionServiceServicer, server: grpc.Server) -> None: ...
