# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from combocurve.dal.v1 import daily_production_pb2 as combocurve_dot_dal_dot_v1_dot_daily__production__pb2


class DailyProductionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Upsert = channel.stream_unary(
                '/combocurve.dal.v1.DailyProductionService/Upsert',
                request_serializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceUpsertRequest.SerializeToString,
                response_deserializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceUpsertResponse.FromString,
                )
        self.ChangeToCompanyScope = channel.unary_unary(
                '/combocurve.dal.v1.DailyProductionService/ChangeToCompanyScope',
                request_serializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceChangeToCompanyScopeRequest.SerializeToString,
                response_deserializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceChangeToCompanyScopeResponse.FromString,
                )
        self.Fetch = channel.unary_stream(
                '/combocurve.dal.v1.DailyProductionService/Fetch',
                request_serializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceFetchRequest.SerializeToString,
                response_deserializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceFetchResponse.FromString,
                )
        self.FetchByWell = channel.unary_stream(
                '/combocurve.dal.v1.DailyProductionService/FetchByWell',
                request_serializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceFetchByWellRequest.SerializeToString,
                response_deserializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceFetchByWellResponse.FromString,
                )
        self.SumByWell = channel.unary_stream(
                '/combocurve.dal.v1.DailyProductionService/SumByWell',
                request_serializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceSumByWellRequest.SerializeToString,
                response_deserializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceSumByWellResponse.FromString,
                )
        self.CountByWell = channel.unary_stream(
                '/combocurve.dal.v1.DailyProductionService/CountByWell',
                request_serializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceCountByWellRequest.SerializeToString,
                response_deserializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceCountByWellResponse.FromString,
                )
        self.DeleteByProject = channel.unary_unary(
                '/combocurve.dal.v1.DailyProductionService/DeleteByProject',
                request_serializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceDeleteByProjectRequest.SerializeToString,
                response_deserializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceDeleteByProjectResponse.FromString,
                )
        self.DeleteByWell = channel.unary_unary(
                '/combocurve.dal.v1.DailyProductionService/DeleteByWell',
                request_serializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceDeleteByWellRequest.SerializeToString,
                response_deserializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceDeleteByWellResponse.FromString,
                )
        self.DeleteByManyWells = channel.unary_unary(
                '/combocurve.dal.v1.DailyProductionService/DeleteByManyWells',
                request_serializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceDeleteByManyWellsRequest.SerializeToString,
                response_deserializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceDeleteByManyWellsResponse.FromString,
                )


class DailyProductionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Upsert(self, request_iterator, context):
        """Upsert daily production data for multiple wells.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeToCompanyScope(self, request, context):
        """Update daily production data for multiple wells, when the wells are changed to company scope.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Fetch(self, request, context):
        """Fetch daily production data for multiple wells. Results are guaranteed to
        be sorted by well, then by date.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchByWell(self, request, context):
        """Fetch daily production data for multiple wells. Returns a column-structured result per well.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SumByWell(self, request, context):
        """Calculate the sum of daily production phases for multiple wells.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountByWell(self, request, context):
        """Calculate the amount of values of daily production phases for multiple wells.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteByProject(self, request, context):
        """Delete all production data for the given project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteByWell(self, request, context):
        """Delete production data for the given well. An optional date range can be
        provided to restrict the production data points to be deleted.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteByManyWells(self, request, context):
        """Delete all production data for the given wells.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DailyProductionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Upsert': grpc.stream_unary_rpc_method_handler(
                    servicer.Upsert,
                    request_deserializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceUpsertRequest.FromString,
                    response_serializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceUpsertResponse.SerializeToString,
            ),
            'ChangeToCompanyScope': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeToCompanyScope,
                    request_deserializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceChangeToCompanyScopeRequest.FromString,
                    response_serializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceChangeToCompanyScopeResponse.SerializeToString,
            ),
            'Fetch': grpc.unary_stream_rpc_method_handler(
                    servicer.Fetch,
                    request_deserializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceFetchRequest.FromString,
                    response_serializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceFetchResponse.SerializeToString,
            ),
            'FetchByWell': grpc.unary_stream_rpc_method_handler(
                    servicer.FetchByWell,
                    request_deserializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceFetchByWellRequest.FromString,
                    response_serializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceFetchByWellResponse.SerializeToString,
            ),
            'SumByWell': grpc.unary_stream_rpc_method_handler(
                    servicer.SumByWell,
                    request_deserializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceSumByWellRequest.FromString,
                    response_serializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceSumByWellResponse.SerializeToString,
            ),
            'CountByWell': grpc.unary_stream_rpc_method_handler(
                    servicer.CountByWell,
                    request_deserializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceCountByWellRequest.FromString,
                    response_serializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceCountByWellResponse.SerializeToString,
            ),
            'DeleteByProject': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteByProject,
                    request_deserializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceDeleteByProjectRequest.FromString,
                    response_serializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceDeleteByProjectResponse.SerializeToString,
            ),
            'DeleteByWell': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteByWell,
                    request_deserializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceDeleteByWellRequest.FromString,
                    response_serializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceDeleteByWellResponse.SerializeToString,
            ),
            'DeleteByManyWells': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteByManyWells,
                    request_deserializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceDeleteByManyWellsRequest.FromString,
                    response_serializer=combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceDeleteByManyWellsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'combocurve.dal.v1.DailyProductionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DailyProductionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Upsert(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/combocurve.dal.v1.DailyProductionService/Upsert',
            combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceUpsertRequest.SerializeToString,
            combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceUpsertResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChangeToCompanyScope(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/combocurve.dal.v1.DailyProductionService/ChangeToCompanyScope',
            combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceChangeToCompanyScopeRequest.SerializeToString,
            combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceChangeToCompanyScopeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Fetch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/combocurve.dal.v1.DailyProductionService/Fetch',
            combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceFetchRequest.SerializeToString,
            combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceFetchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchByWell(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/combocurve.dal.v1.DailyProductionService/FetchByWell',
            combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceFetchByWellRequest.SerializeToString,
            combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceFetchByWellResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SumByWell(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/combocurve.dal.v1.DailyProductionService/SumByWell',
            combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceSumByWellRequest.SerializeToString,
            combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceSumByWellResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CountByWell(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/combocurve.dal.v1.DailyProductionService/CountByWell',
            combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceCountByWellRequest.SerializeToString,
            combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceCountByWellResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteByProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/combocurve.dal.v1.DailyProductionService/DeleteByProject',
            combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceDeleteByProjectRequest.SerializeToString,
            combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceDeleteByProjectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteByWell(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/combocurve.dal.v1.DailyProductionService/DeleteByWell',
            combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceDeleteByWellRequest.SerializeToString,
            combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceDeleteByWellResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteByManyWells(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/combocurve.dal.v1.DailyProductionService/DeleteByManyWells',
            combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceDeleteByManyWellsRequest.SerializeToString,
            combocurve_dot_dal_dot_v1_dot_daily__production__pb2.DailyProductionServiceDeleteByManyWellsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
